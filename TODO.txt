
TODO
----

-1.  What should be done with NAs in the incoming data? 0s?

0. Parameters to optimize:
   -- reducing number of needed genes to minimum
   -- break points for binning genes
   -- eta, max depth
   -- ensemble size (want it not too big) for speed of calling
   -- ptail -- the proportion of genes to select
   -- allow overlapping genes across subtype models? or hard partitions?
   -- included genes ... just use immune genes?

1. Switch to turn off feature selection... maybe just make ptail=1?
   -- and skip the rank sum test if ptail=1

2. Allow entrez IDs or gene symbols (two fit models?)   ### or ensembl!

3. Allow for missing genes.
   -- fill in matrix with empty values for missing genes.
   -- think model expects a column named g_i

4. Drop genes that are not in any model.. smaller models
     X (R script in test dir) have to gather list of features across all models --
     -- when new data comes in with missing genes
        -- print warning
        -- add them to the matrix as zeros.

5. Just binning gene values did not translate well to another gene quantification...
   -- will try gene pairs based on most important genes

6. -- take informative genes from binned expression model
   -- take genes from immune signatures used for orig. immune subtyping
   -- use informative genes as centers to generate top-scoring-pairs style features
      i.e.  For a given sample, in subtype 2, gene_i is informative, then the signature genes are binned to 0,1 based on 
            whether they're higher or lower in expression compared to the center gene. This includes the other informative
            genes as well.
   -- use the vary large set of binary features, now gene pairs, to train the ensemble model.
   -- this involves a stronger cut for whether to take a gene or not when training models for a given subtype
   -- then we have a set of classifiers, in the ensemble, each with a set of informative genes.
   -- We need to then use those to retrain the models so that when a user brings in new data, that 
      not all gene pairs need to be computed...
   -- create data set (in /data) that details the gene pairs that need to be computed.
   -- missing genes can be random 0s and 1s
   -- Then when a new sample comes in, the gene pairs list is imported, and features are computed, 
      subtypes called.
      
      

Create classifier 
